접근제한자
: 클래스내에 작성되는 변수는 지금까지는 색상, 가격 이런 기본적인 연습용 데이터였지만
 사실상 자바 개발자가 현업에서 다루는 업무는 주로 계좌, 고객정보 등 상당히 민감한 데이터를
 다룹니다. 따라서 클래스내에 있는 변수는 데이터 이므로 보호받아야됩니다.
 자바에서는 이렇게 데이터를 보호할 수 있는 보안 장치를 지원해 주는데, 이를 가리켜
 접근 제한자 라고 합니다.

접근 제한자의 종류
 약한것 순으로 나열

public (보안도 아님 그냥 공개)

protected(상속관계에 있는 부모자식 클래스끼리 접근 가능)

default(같은 패키지 안에 있는 클래스끼리만 접근 가능,상속받았다 할지라도 같은 패키지가 아니라면 접근 못함)

private(같은 클래스내의 멤버끼리만 접근가능)
	예) 멤버메서드가 멤버변수에 접근

보안 순서
public < protected < default < private

마치 개발할때 개발자가 보안을 철저히 따져가면서 클래스를 만들거 같지만
사실 private를 많이 쓰게 된다. 

----------------------------------------------------------------------------------------
접근 제한자는 자바에서 보안을 처리하기 위한 방법을 제공합니다.
여기서 특히 private의 활용도가 상당히 높습니다.
사실상 클래스내에 선언되는 변수는 모두 private하는게 많다.
왜냐하면 데이터는 보호되어야 한다. 
내부장치를 외부에서 접근하려면 접근 "방법"을 제공해주어야 하는데
이게 바로 getter/setter메서드 이다.
데이터를 private보호하고, 오직 getter/setter를 통해서만 데이터를 간접 제어할수 있도록
클래스를 정의하는 기법을 가리켜 객체지향 OOP에서는 은닉화(=EnCaptualation)캡슐화라고 한다.


접근제어 문제 3번
public void setName(String name){
	this.name=name;
}
public String getName(){
	return name;
}

public void setAge(int age){
	this.age=age;
}
public int getAge(){
	return age;
}

public void setIsMarry(boolean isMarry){
	this.isMarry=isMarry;
}
public boolean getIsMarry(){
	return isMarry;
}

--------------------------------------------------------

객체지향 언어인 자바에서는 모든 사물을 단독으로 존재할 수 없다는 관점을 2가지 경우로 나눈다
1)is a관계 : ex) Duck is a Bird "오리는 새다"
			상속 관계를 나타내는 말이다.

2) has a 관계: 자동차는 바퀴를 가지고 있다. Car has a Wheel
			부품관계를 나타내는 말이다.
			부품관계란, 특정 객체가 다른 객체를 맴버변수로 보유한 경우를 말한다
